clear all

% im = imread('IMG_3761_small.JPG');
im = imread('plank.png');
% im = imread('plank_blur.jpg');
% im = imresize(im, 0.3);
im = imgaussfilt(im, 1);
% im = localcontrast(im);


% masked = maskImage(im);
% figure(1)
% montage(masked)
% C = findCorners(masked);
%edges = detectEdges(masked, 0.045);
%plotLines(edges);

C = corner(rgb2gray(im));
figure(1)
imshow(rgb2gray(im))
hold on
plot(C(:,1),C(:,2), 'ro')
hold off


function [corners] = findCorners(I)
    corners = []
    for i=1:4
        corners = [corners; corner(rgb2gray(I(:,:,:,i)))];
    end
end
function plotLines(edges)
    [H,theta,rho] = hough(edges);
    P = houghpeaks(H,500,'threshold',ceil(0.4*max(H(:))));
    lines = houghlines(edges,theta,rho,P,'FillGap',20,'MinLength',3);
    figure(2), imshow(edges), hold on
    max_len = 0;
    for k = 1:length(lines)
       xy = [lines(k).point1; lines(k).point2];
       plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','green');

       % Plot beginnings and ends of lines
       plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');
       plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');

       % Determine the endpoints of the longest line segment
       len = norm(lines(k).point1 - lines(k).point2);
       if ( len > max_len)
          max_len = len;
          xy_long = xy;
       end
    end
    % highlight the longest line segment
    plot(xy_long(:,1),xy_long(:,2),'LineWidth',2,'Color','red');
end
function masked = maskImage(im)
    mask = zeros(size(im));
    mask = repmat(mask, [1 1 1 4]);
    
    mask(:,:,:,4) = repmat(blueMask(im),[1 1 3]);
    mask(:,:,:,3) = repmat(greenMask(im),[1 1 3]);
    mask(:,:,:,2) = repmat(redMask(im), [1 1 3]);
    mask(:,:,:,1) = (mask(:,:,:,2) | mask(:,:,:,3) | mask(:,:,:,4));
    
    se = strel('disk', 5);
    %mask = imclose(mask, se);
    %mask = imopen(mask,se);
    se = strel('disk', 2);
    %mask = imdilate(mask, se);
    masked = repmat(im, [1 1 1 4]);
    masked(~mask) = 0;
end
function [edges] = detectEdges(masked, th)
    edges1 = edge(rgb2gray(masked(:,:,:,2)),'canny',th);
    edges2 = edge(rgb2gray(masked(:,:,:,3)),'canny',th);
    edges3 = edge(rgb2gray(masked(:,:,:,4)),'canny',th);
    edges = edges1|edges2|edges3;
    se = strel('disk', 1);
    edges = imclose(edges, se);
    shape = size(masked);
    mont = zeros(shape(1), shape(2), 4);
    size(mont)
    mont(:,:,1) = edges;
    mont(:,:,2) = edges1;
    mont(:,:,3) = edges2;
    mont(:,:,4) = edges3;
    figure(3)
    montage(mont)
end
function [BW,maskedRGBImage] = blueMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 25-Mar-2019
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.555;
channel1Max = 0.771;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.313;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end
function [BW,maskedRGBImage] = greenMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 25-Mar-2019
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.181;
channel1Max = 0.338;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.313;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end
function [BW,maskedRGBImage] = redMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 25-Mar-2019
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.930;
channel1Max = 0.018;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.313;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = ( (I(:,:,1) >= channel1Min) | (I(:,:,1) <= channel1Max) ) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end
